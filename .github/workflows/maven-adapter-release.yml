name: Create Maven adapter release
on:
  push:
    tags:
      - '*_*_*'
jobs:
  build:
    name: Build release
    runs-on: ubuntu-latest
    steps:
      - name: Set env
        run: echo "TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - uses: winterjung/split@v2
        id: split
        with:
          msg: ${{ env.TAG }}
          separator: '_'
      - uses: actions/checkout@v2.3.3
      - uses: actions/setup-java@v2
        with:
          java-version: ${{steps.split.outputs._2}}
          distribution: adopt
      - uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
      - name: Set version
        run: mvn -B versions:set -DnewVersion=${{ steps.split.outputs._1 }} versions:commit
        working-directory: ${{steps.split.outputs._0}}
      - name: Create settings.xml
        uses: whelk-io/maven-settings-xml-action@v15
        with:
          servers: |
            [
              {
                "id": "oss.sonatype.org",
                "username": "${{ secrets.SONATYPE_USER }}",
                "password": "${{ secrets.SONATYPE_PASSWORD }}"
              }
            ]
          profiles: |
            [
              {
                "id": "artipie",
                "properties": {
                  "gpg.keyname": "${{ secrets.GPG_KEYNAME }}",
                  "gpg.passphrase": "${{ secrets.GPG_PASSPHRASE }}"
                }
              }
            ]
      - name: Deploy artifacts
        run: mvn deploy -Partipie,publish,sonatype,gpg-sign -DskipITs --errors
        working-directory: ${{steps.split.outputs._0}}
      - name: Create Github Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ env.TAG }}
          draft: false
          prerelease: false
